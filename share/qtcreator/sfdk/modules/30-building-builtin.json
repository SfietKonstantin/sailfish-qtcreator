{
    "version": 1,
    "domain": "building",
    "trBrief": "Building packages",

    "trDescription": "THE SDK BUILD ENGINE\n\nThe native platform for Sailfish OS software development is GNU/Linux (Linux). In order to enable development on macOS and Windows as well as to support miscellaneous Linux variants more easily, the Sailfish SDK encapsulates its back-end in a virtual machine running a specifically tailored Linux distribution, the so called SDK Build Engine.\n\nCompilers and other tools running inside the build engine access the host file system through shared directories. By default the user home directory is shared for this purpose. In addition to that an alternative directory may be selected during SDK installation and through the Options dialog of the Sailfish IDE (Qt Creator).\n\nSometimes the paths from inside the build engine leak in sfdk output. Understanding to the fact that certain paths exist inside the build engine and possibly map to certain paths on the host filesystem may help debugging issues with advanced or non standard use of the SDK. These are the paths commonly seen:\n\n- /home/mersdk/share\n    This is where the user home directory shared from the host file system maps to\n- /home/src1\n    This is where the alternative source directory shared from the host file system maps to\n- /home/deploy\n    Files under this directory are physically stored inside the virtual machine. This location is used by 'rpmbuild' as the %buildroot, for which purpose a \"fully capable\" file system is needed.\n\nWhen the global '--debug' option is used, reverse path mapping in sfdk output is disabled.\n\nThe build engine can be conveniently controlled with the 'engine' command. The virtual machine will start automatically when needed but be aware that it continues running on background until explicitly stopped.",

    "worker":
    {
        "type": "builtin",
        "version": 1
    },

    "commands":
    [
        {
            "name": "engine",
            "trSynopsis": "{start|stop|status}\nexec [<command> [<arg>...]]",
            "trBrief": "Control the build engine",
            "trDescription": "The 'start' and 'stop' commands allow to control the build engine virtual machine conveniently. Starting the build engine explicitly is usually not required - commands that need build engine running will ensure it is running. The 'status' command prints status information.\n\nThe 'exec' command allows executing an arbitrary <command> inside the build engine. If no <command> is specified, an interactive shell is executed."
        }
    ],

    "options":
    [
    ]
}
